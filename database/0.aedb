_item_name: !!python/tuple
- text
- '0'
description: !!python/tuple
- text
- "\n    Boot item. Contains the executable for actually booting other database utilities."
executable: !!python/tuple
- python_source
- "class Item():\n    def __init__(self, name=\"0\", item_dict=None, ):\n        if\
  \ item_dict:\n            self.__dict__ = item_dict\n        else:\n           \
  \ self.__dict__  = _load_by_name(name=name)\n        if \"_init_executable\" in\
  \ self.__dict__:\n            exec(self._init_executable[1])\n    def addkey(self,key=\"\
  test\", value=\"value\"):\n        self.__dict__.update({key: value})\n\n    def\
  \ write(self):\n        with open(path_data/(self._item_name[1] + \".aedb\"), 'w+')\
  \ as file:\n            yaml.dump(self.__dict__, file, default_flow_style=False)\n\
  \    \n    def execute(self,**kwargs):\n        exec(self.executable[1])\n    \n\
  \    def __str__(self):\n        string  = \"\"\n        for key, value in self.__dict__.items():\n\
  \            string += \"\\nKey: %s:\" % (key)\n            string += \"\\tType:\
  \ %s\" % (value[0])\n            string += \"\\tValue: \\n%s\" % (str(value[1]))\n\
  \        return string\n\ndef _regenerate_boot(path = path_data / \"0.aedb\"):\n\
  \    meta.constructor.generate_boot(path)\n\ndef _regenerate_config(path = path_data\
  \ / \"1.aedb\"):\n    meta.constructor.generate_config(path)\n\ndef _generate_item(name,\
  \ item_dict):\n    with open(path_data/(name + \".aedb\"), 'w+') as file:\n    \
  \    yaml.dump(item_dict, file, default_flow_style=False)\n\n_boot = Item(name=\"\
  0\")\n_config = Item(name=\"1\")\n_metaindex = Item(name=_config._index_list[1])\n\
  \nprint(_config.logo[1])\nprint(_config.intro[1])\n\nprompt = ash + \": \" # Stupid\
  \ hack to get the symbol\n\ntry:\n    while True:\n        print(prompt, end=\"\"\
  )\n        exec('\\n'.join(iter(input, \"\")))\nexcept KeyboardInterrupt:\n    pass\n"
